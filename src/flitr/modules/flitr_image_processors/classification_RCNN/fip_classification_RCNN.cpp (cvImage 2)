/* Framework for Live Image Transformation (FLITr)
 * Copyright (c) 2010 CSIR
 *
 * This file is part of FLITr.
 *
 * FLITr is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * FLITr is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FLITr. If not, see
 * <http://www.gnu.org/licenses/>.
 */

#include <flitr/modules/flitr_image_processors/classification_RCNN/fip_classification_RCNN.h>


/*Caffe and OpenCV*/
//#include <caffe.pb.h>
#ifdef FLITR_USE_CAFFE
    #include <caffe/caffe.hpp>
    #include <caffe/proto/caffe.pb.h>
#endif

#ifdef FLITR_USE_OPENCV
    #include <opencv2/core/core.hpp>
    #include <opencv2/highgui/highgui.hpp>
    #include <opencv2/imgproc/imgproc.hpp>
    using namespace cv;
    //using namespace cv::dnn
#endif

#include <algorithm>
#include <iosfwd>
#include <memory>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <stdio.h>

//Time
struct timeval start, end;


using namespace flitr;
//using std::shared_ptr;
//using namespace std;

using namespace caffe;  // NOLINT(build/namespaces)


using cv::String;

FIPClassifyRCNN::FIPClassifyRCNN(ImageProducer& upStreamProducer,
                                 uint32_t images_per_slot, uint32_t buffer_size)
    : ImageProcessor(upStreamProducer, images_per_slot, buffer_size)
{
    //Setup image format being produced to downstream.
    for (uint32_t i=0; i<images_per_slot; i++) {
        //ImageFormat(uint32_t w=0, uint32_t h=0, PixelFormat pix_fmt=FLITR_PIX_FMT_Y_8, bool flipV = false, bool flipH = false):
        ImageFormat downStreamFormat(upStreamProducer.getFormat().getWidth(), upStreamProducer.getFormat().getHeight(),
                                     upStreamProducer.getFormat().getPixelFormat());
        ImageFormat_.push_back(downStreamFormat);

        if(classifier == NULL){
            cerr<<"\n\nInitialising the RCNN Classifier.....\n";
            Caffe::set_mode(Caffe::GPU);

            classifier = new Classifier(trained_modelBinary, modelConfiguration, labels_file);

        }
    }
}


FIPClassifyRCNN::~FIPClassifyRCNN()
{
    delete cvImage;
    //free(classifier);
    //#delete classifier;

}

bool FIPClassifyRCNN::init()
{
    bool rValue=ImageProcessor::init();
    //Note: SharedImageBuffer of downstream producer is initialised with storage in ImageProcessor::init.

    return rValue;
}

//===================================================
//== My Temp Caffe functions
int convertFLITrToCVFormat(flitr::ImageFormat::PixelFormat pixelFormat)
{
    int opencvFormat;
    switch(pixelFormat)
    {
    case flitr::ImageFormat::FLITR_PIX_FMT_RGB_8:

        opencvFormat=CV_8UC3;
        break;

    case flitr::ImageFormat::FLITR_PIX_FMT_Y_8:
        opencvFormat=CV_8UC1;
        break;

    case flitr::ImageFormat::FLITR_PIX_FMT_BGR:
        opencvFormat=CV_8UC3;
        break;

    default:

        opencvFormat=CV_8UC3;
        std::cout << "Unsupported Image Format, default Image Format will be used.\n";
        break;

    }

    return opencvFormat;
}

class BackgroundTriggerThread : public FThread {
public:
    BackgroundTriggerThread(ImageProducer* p) :
    Producer_(p),
    ShouldExit_(false) {}

    void run()
    {
        while(!ShouldExit_)
        {
            if (!Producer_->trigger()) FThread::microSleep(5000);
            //if (!Producer_->trigger()) FThread::microSleep(1000);
        }
    }

    void setExit() { ShouldExit_ = true; }

private:
    ImageProducer* Producer_;
    bool ShouldExit_;
};


double getElapsedTime(timeval startTime, timeval endTime){
    long seconds  = endTime.tv_sec  - startTime.tv_sec;
    long useconds = endTime.tv_usec - startTime.tv_usec;    //decimal sec

    long milliSec = ((seconds) * 1000 + useconds/1000.0) + 0.5;
    return (double) milliSec/1000;
}

bool FIPClassifyRCNN::trigger()
{
    if ((getNumReadSlotsAvailable())&&(getNumWriteSlotsAvailable()))
    {//There are images to consume and the downstream producer has space to produce.
        std::vector<Image**> imvRead=reserveReadSlot();
        std::vector<Image**> imvWrite=reserveWriteSlot();

        //Start stats measurement event.
        ProcessorStats_->tick();

        for (size_t imgNum=0; imgNum<1; ++imgNum)//For now, only process one image in each slot.
        {
            imageNum++;   //# CV image count
            const ImageFormat imFormat=getDownstreamFormat(imgNum);

            if (imFormat.getPixelFormat()==ImageFormat::FLITR_PIX_FMT_Y_8 ||
                imFormat.getPixelFormat()==ImageFormat::FLITR_PIX_FMT_RGB_8
            ){
                Image const * const imRead = *(imvRead[imgNum]);
                Image * const imWrite = *(imvWrite[imgNum]);

                uint8_t const * const dataRead=imRead->data();
                //uint8_t * const dataWrite=imWrite->data();

                uint8_t * const dataWrite = imWrite->data();
                //float * const dataWrite = (float * const)imWrite->data();

                const size_t width=imFormat.getWidth();
                const size_t height=imFormat.getHeight();

                //memset(dataWrite, 0, width*height);//Clear the downstream image.


                //=================================
#if directCvImageCopy
                /// Copy flitr image to OpenCV (memcopy)
                int opencvFormat = convertFLITrToCVFormat(imFormat.getPixelFormat());
                cvImage = new Mat( (int)height,(int)width, opencvFormat) ;  //#Use CV_8UC1
                cvImage->data = (uchar*)(((imvRead[0])[0]))->data();
                //cvImage->data = (uchar*)(((imvRead[0])[0]))->data();
#else

                //=================================
                // Copy flitr image to OpenCV (For Loop)
                Mat cvImage2;
                if (imFormat.getPixelFormat()==ImageFormat::FLITR_PIX_FMT_RGB_8){
                    //cvImage = new Mat((int)height, (int)width ,CV_8UC3, Scalar(0,0,0));
                    cvImage2 = Mat((int)height, (int)width ,CV_8UC3, Scalar(0,0,0));

                    //Split the image channels, to modify them sperately
                    vector<Mat> channels(3);
                    split(cvImage2, channels);

                    cout<< "# cvImage.size " << cvImage2.rows <<" " <<cvImage2.cols <<endl;
                    cout<< "# cvImage.channels: " <<cvImage2.channels() <<endl;

                    for(size_t y=0; y<height; y++){
                        size_t rowOffset = y * width*3;
                        for(size_t x=0; x<width; x++){
                            //Copy flitr image to opencv
                            (channels[0]).at<uint8_t>(y,x) = (uint8_t) dataRead[rowOffset +0];
                            (channels[1]).at<uint8_t>(y,x) = (uint8_t) dataRead[rowOffset +1];
                            (channels[2]).at<uint8_t>(y,x) = (uint8_t) dataRead[rowOffset +2];

                            /*
                            dataWrite[rowOffset +0] = dataRead[rowOffset +0];
                            dataWrite[rowOffset +1] = dataRead[rowOffset +1];
                            dataWrite[rowOffset +2] = dataRead[rowOffset +2];   */

                            rowOffset+=3;
                        }
                    }

                    //Merge the channels back to the image
                    cv::merge(channels,cvImage2);

                }else if(imFormat.getPixelFormat()==ImageFormat::FLITR_PIX_FMT_Y_8){
                    //cvImage = new Mat((int)height, (int)width ,CV_8UC1);
                    cvImage2 = Mat((int)height, (int)width ,CV_8UC1);
                    for(size_t y=0; y<height;y++){
                        size_t rowOffset = y*width;

                        for(size_t x=0; x<width;x++){
                            cvImage2.at<uint8_t>(y,x) = (uint8_t) dataRead[rowOffset +x];
                            //dataWrite[rowOffset +x] = dataRead[rowOffset +x];
                        }
                    }
                }
#endif
                //===========================================================
                //= Run the CNNs

                gettimeofday(&start, NULL);
                cout<<endl;
                classifier->classify(cvImage2);
                gettimeofday(&end, NULL);
                cout<<"Time(s): Classification:" << getElapsedTime(start,end) <<endl;

                //===========================================================
                //Copy the classification results image back to OSG viewer
                if (imFormat.getPixelFormat()==ImageFormat::FLITR_PIX_FMT_RGB_8){
                    for(size_t y=0; y<height; y++){
                        size_t rowOffset = y * width*3;
                        for(size_t x=0; x<width; x++){
                            //Copy  opencv image to flitr
                            dataWrite[rowOffset +0] = (uint8_t) cvImage2.at<cv::Vec3b>(y,x)[0];
                            dataWrite[rowOffset +1] = (uint8_t) cvImage2.at<cv::Vec3b>(y,x)[1];
                            dataWrite[rowOffset +2] = (uint8_t) cvImage2.at<cv::Vec3b>(y,x)[2];

                            rowOffset+=3;
                        }
                    }
                }else if(imFormat.getPixelFormat()==ImageFormat::FLITR_PIX_FMT_Y_8){
                    //Copy the classification results image back to OSG viewer
                    memcpy(((imvWrite[0])[0])->data(), cvImage2.data , sizeof(uchar)*(width*height) ) ;
                }

            } //#endif (imFormat.getPixelFormat() ==)
        }

        //Stop stats measurement event.
        ProcessorStats_->tock();

        releaseWriteSlot();
        releaseReadSlot();

        return true;
    }

    return false;
}

